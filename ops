{"version":1,"ops":[{"type":6,"author":{"id":"8bb2e2064051e551a5dd57a858a993fc9e61081d"},"timestamp":1598935167,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MjMxOTU2NDc="},"target":"c6d9313988957a140eac2e0066ab9e1d546e078b4dba9156651c21f51cf94fd8","message":"The problem is seen in Net::Ping in the Perl core, version \nperl-5.30.1-4.2.x86_64 from OpenSuSE Tumbleweed.  \nPackage $VERSION = 2.71\n\nI ran the following tester (comments and debug stuff omitted):\n```\n    use Net::Ping;\n    my $holly4 = \"192.9.200.199\";\n    my $holly6 = \"[2600:3c01:e000:306::c7]\";\n    my @proto; @proto[qw(4 6)] = qw(icmp icmpv6);\n    foreach my $ip (($holly4, $holly6)) {\n        my $AF = (index($ip, ':') \u003e= 0) ? 6 : 4;\n        my $p = Net::Ping-\u003enew($proto[$AF], 1); \n        my $hrc = $p-\u003eping($ip);\n        print \"rc = $hrc  AF = $AF  $ip\\n\";\n    }\n```\nIt returns $hrc = 1 (success) when pinging the IPv4 address, but failure\nfor IPv6, plus several complaints about substring outside of string, and\nresulting undefined arguments to functions.  The problem is seen in\nmultiple apps whenever ping() gets hold of an IPv6 address, either from\ngetaddrinfo or as a literal address.\n\nIt turns out that ICMP returns the IP header (20 octets) plus the \npayload (8 octets), while ICMPv6 returns only the payload.  I've \nincluded a patch to adjust the payload location per address family,\nwhich enables it to ping both families reliably.  I also added an item\nto the POD illustrating that the literal IPv6 address has to be in \n[brackets] and that icmpv6 has to be used.  \n\nI didn't test other ping protocols; they might have related issues with\nIPv6 and I wouldn't know.  \n\nI wonder if the icmp and icmpv6 protocol keywords could be interchanged\ndynamically according to the address family inferred from the IP, which\ncould be either when an alphabetic hostname is resolved.  But I didn't\ntry implementing this.  \n\nPatch: \n```\n--- Ping.pm.orig        2020-07-22 02:30:10.000000000 -0700\n+++ Ping.pm     2020-08-31 17:35:22.676506494 -0700\n@@ -770,7 +770,12 @@\n       $from_seq = -1;\n       $from_saddr = recv($self-\u003e{fh}, $recv_msg, 1500, ICMP_FLAGS);\n       ($from_port, $from_ip) = _unpack_sockaddr_in($from_saddr, $ip-\u003e{family});\n-      ($from_type, $from_subcode) = unpack(\"C2\", substr($recv_msg, 20, 2));\n+               # Looks like ICMP echo includes the header and ICMPv6 doesn't.\n+               # IPv4 length($recv_msg) is 28 (20 header + 8 payload) while \n+               # IPv6 length is only 8.  $pyld = where the payload really \n+               # starts. \n+      my $pyld = ($ip-\u003e{family} == AF_INET) ? 20 : 0;\n+      ($from_type, $from_subcode) = unpack(\"C2\", substr($recv_msg, $pyld, 2));\n       if ($from_type == ICMP_TIMESTAMP_REPLY) {\n         ($from_pid, $from_seq) = unpack(\"n3\", substr($recv_msg, 24, 4))\n           if length $recv_msg \u003e= 28;\n@@ -2012,6 +2017,10 @@\n     }\n     $p-\u003eclose();\n \n+    $p = Net::Ping-\u003enew(\"icmpv6\");\n+    $ip = \"[fd00:dead:beef::4e]\";\n+    print \"$ip is alive.\\n\" if $p-\u003eping($ip);\n+\n     $p = Net::Ping-\u003enew(\"tcp\", 2);\n     # Try connecting to the www port instead of the echo port\n     $p-\u003eport_number(scalar(getservbyname(\"http\", \"tcp\")));\n```","files":null},{"type":3,"author":{"id":"8bb2e2064051e551a5dd57a858a993fc9e61081d"},"timestamp":1598935265,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY4NDIxODA4OA==","github-url":"https://github.com/rurban/Net-Ping/issues/21#issuecomment-684218088"},"message":"Thanks. But ICMPv6 should really behave like ICMP. I'll rather fix the root cause instead.","files":null},{"type":3,"author":{"id":"8bb2e2064051e551a5dd57a858a993fc9e61081d"},"timestamp":1599555320,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY4ODcyNDg2Nw==","github-url":"https://github.com/rurban/Net-Ping/issues/21#issuecomment-688724867"},"message":"adusted testcase:\n```\nrequire Net::Ping;\nmy $is_devel = $ENV{PERL_CORE} || -d \".git\" ? 1 : 0;\nif (!Net::Ping::_isroot()) {\n    my $file = __FILE__;\n    my $lib = $ENV{PERL_CORE} ? '-I../../lib' : '-Mblib';\n    # -n prevents from asking for a password. rather fail then\n    # A technical problem is with leak-detectors, like asan, which\n    # require PERL_DESTRUCT_LEVEL=2 to be set in the root env.\n    my $env = \"PERL_DESTRUCT_LEVEL=2\";\n    if ($ENV{TEST_PING6_HOST}) {\n      $env .= \" TEST_PING6_HOST=$ENV{TEST_PING6_HOST}\";\n    }\n    if ($ENV{PERL_CORE} \u0026\u0026 $Config{ldlibpthname}) {\n      my $up = File::Spec-\u003eupdir();\n      my $dir = Cwd::abs_path(File::Spec-\u003ecatdir($up, $up));\n      $env .= \" $Config{ldlibpthname}=\\\"$dir\\\"\";\n    }\n    if ($is_devel and\n        system(\"sudo -n $env \\\"$^X\\\" $lib $file\") == 0) {\n      exit;\n    } else {\n      die 'no sudo/failed';\n    }\n}\n\nuse Net::Ping;\nmy $google4 = \"172.217.16.78\"; # google.com\nmy $google6 = \"[2a00:1450:4005:80a::200e]\"; # google.com\nmy @proto; @proto[qw(4 6)] = qw(icmp icmpv6);\nforeach my $ip (($google4, $google6)) {\n  my $AF = (index($ip, ':') \u003e= 0) ? 6 : 4;\n  my $p = Net::Ping-\u003enew($proto[$AF], 1); \n  my $hrc = $p-\u003eping($ip);\n  print \"rc = $hrc  AF = $AF  $ip\\n\";\n}\n```","files":null},{"type":6,"author":{"id":"8bb2e2064051e551a5dd57a858a993fc9e61081d"},"timestamp":1599555320,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzk4NTA2OTU3"},"target":"50b6c8d67224f5b91d766ad3c618516415043a6a8ce429eaa432c6a616e45763","message":"adjusted testcase:\n```\nrequire Net::Ping;\nmy $is_devel = $ENV{PERL_CORE} || -d \".git\" ? 1 : 0;\nif (!Net::Ping::_isroot()) {\n    my $file = __FILE__;\n    my $lib = $ENV{PERL_CORE} ? '-I../../lib' : '-Mblib';\n    # -n prevents from asking for a password. rather fail then\n    # A technical problem is with leak-detectors, like asan, which\n    # require PERL_DESTRUCT_LEVEL=2 to be set in the root env.\n    my $env = \"PERL_DESTRUCT_LEVEL=2\";\n    if ($ENV{TEST_PING6_HOST}) {\n      $env .= \" TEST_PING6_HOST=$ENV{TEST_PING6_HOST}\";\n    }\n    if ($ENV{PERL_CORE} \u0026\u0026 $Config{ldlibpthname}) {\n      my $up = File::Spec-\u003eupdir();\n      my $dir = Cwd::abs_path(File::Spec-\u003ecatdir($up, $up));\n      $env .= \" $Config{ldlibpthname}=\\\"$dir\\\"\";\n    }\n    if ($is_devel and\n        system(\"sudo -n $env \\\"$^X\\\" $lib $file\") == 0) {\n      exit;\n    } else {\n      die 'no sudo/failed';\n    }\n}\n\nuse Net::Ping;\nmy $google4 = \"172.217.16.78\"; # google.com\nmy $google6 = \"[2a00:1450:4005:80a::200e]\"; # google.com\nmy @proto; @proto[qw(4 6)] = qw(icmp icmpv6);\nforeach my $ip (($google4, $google6)) {\n  my $AF = (index($ip, ':') \u003e= 0) ? 6 : 4;\n  my $p = Net::Ping-\u003enew($proto[$AF], 1); \n  my $hrc = $p-\u003eping($ip);\n  print \"rc = $hrc  AF = $AF  $ip\\n\";\n}\n```","files":null},{"type":3,"author":{"id":"8bb2e2064051e551a5dd57a858a993fc9e61081d"},"timestamp":1599555627,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY4ODcyNzk5Nw==","github-url":"https://github.com/rurban/Net-Ping/issues/21#issuecomment-688727997"},"message":"Ok, you are right. I wont patch the Socket code, because this depends on te core version.\nYour patch is fine, I take it.","files":null},{"type":6,"author":{"id":"8bb2e2064051e551a5dd57a858a993fc9e61081d"},"timestamp":1599555627,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzk4NTA4MTkz"},"target":"d0c9510f72287ddde21fc6115b29280edf43d399b14e5bac1defdcfa9700b0bb","message":"Ok, you are right. I wont patch the Socket code, because this depends on the core version.\nYour patch is fine, I take it.","files":null},{"type":3,"author":{"id":"8bb2e2064051e551a5dd57a858a993fc9e61081d"},"timestamp":1599725776,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5MDA3MjczNg==","github-url":"https://github.com/rurban/Net-Ping/issues/21#issuecomment-690072736"},"message":"Released as 2.74, thanks!","files":null},{"type":4,"author":{"id":"8bb2e2064051e551a5dd57a858a993fc9e61081d"},"timestamp":1599725776,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50Mzc0OTYzMzU5Mg=="},"status":2}]}